method 1
brute force 
#include<bits/stdc++.h>
using namespace std;
void match_index(string str,string ptn,int n,int m)
{
    bool flag=0;
    int j;
    for(int i=0;i<n-m+1;i++)
    { j=0;
      while(j<m && str[i+j]==ptn[j])
         j++;
    
     if(j==m)
     {
        cout<<" at index "<<i<<endl;
        flag=1;
     }

    }
    if(!flag)
    cout<<" no pettern match";
}

int main()
{
    string str="geeksforgeeks";
    string ptn ="geeks";
    int m=ptn.length();
    int n=str.length();
    match_index(str,ptn,n,m);
}
method 2
kmp algorithim
#include<bits/stdc++.h>
using namespace std;
 void compute_lps(string ptn,int m,int* lps)
 {
     lps[0]=0;
     int len=0;
     int i=1;
     while(i<m)
     {
         if(ptn[i]==ptn[len])
         {
             len++;
             lps[i]=1+lps[i-1];
             i++;
         }
         else
         {
             if(len)
             len=lps[len-1];
             else
             {
                 lps[i]=0;
                 i++;
             }
         }
     }
     
 }
void match_index(string str,string ptn,int n,int m)
{
    int lps[m];
    compute_lps(ptn,m,lps);
    int i=0,j=0;
    while(i<n)
    {
        if(i<n && str[i]==ptn[j])
        {
            i++;j++;
        }
        if(j==m)
        {
            cout<<i-j<<"th index"<<endl;
            j=lps[j-1];
        }
        else if(i<n && str[i]!=str[j])
        {
            if(j)
            j=lps[j-1];
            else 
            i++;
        }
    }
}

int main()
{
    string str="geeksforgeeks";
    string ptn ="geeks";
    int m=ptn.length();
    int n=str.length();
    match_index(str,ptn,n,m);
}
method 3:
robin karp algo
#include<bits/stdc++.h>
using namespace std;
#define d 256

void match_index(string str,string ptn,int n,int m,int q)
{
    int h=1;
   for(int i=1;i<m;i++)
   {
       h=(h*d)%q;
   }
   //hash hash value for ptn and str
   int t=0;//hash value for txt
   int p=0;//hash value for ptn
   for(int i=0;i<m;i++)
   {
       t=(t*d+str[i])%q;
       p=(p*d+ptn[i])%q;
   }
   for(int i=0;i<=n-m;i++)
   {
       if(p==t)
       {
           int j;
           for( j=0;j<m;j++)
           {
               if(str[i+j]!=ptn[j])
               break;
           }
           if(j==m)
           cout<<" petern found at index "<<i<<endl;
       }
       if(i<n-m)
       {
           t=(d*(t-str[i]*h)+str[i+m])%q;
           if(t<0)
           t=t+q;
       }
   }

}


int main()
{
    string str="geeksforgeeks";
    string ptn ="geeks";
    int m=ptn.length();
    int n=str.length();
    int q=256;
    match_index(str,ptn,n,m,q);
}
metod 4 
using autometa theory
thankyou


