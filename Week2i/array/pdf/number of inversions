method 1
brute force
#include<bits/stdc++.h>
using namespace std;
int number_of_inversion(int arr[],int n)
{
    int count=0;
    for(int i=0;i<n-1;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(arr[i]>arr[j])
            count++;
        }
    }
    return count;
}

int main()
{
    int arr[4]={8,4,2,1};
    int size=4;
    cout<<number_of_inversion(arr,size);
    return 0;
}
method 2:
enhance merge sort
#include<bits/stdc++.h>
using namespace std;

int merge(int arr[],int temp[],int l,int m,int h)
{
    int i=l;
    int j=m;
    int k=l;
    int count=0;
    while(i<m &&j<=h)
    {
        if(arr[i]<=arr[j])
        {
            temp[k++]=arr[i];
            i++;
        }
        else
        {
            temp[k++]=arr[j];
            j++;
            count+=m-i;

        }
    }
    while(i<m)
     temp[k++]=arr[i++];

     while(j<=h)
     temp[k++]=arr[j++];
     

    for(int i=l;i<=h;i++)
    {
        arr[i]=temp[i];
    }
    return count;
}

int mergesort(int arr[],int temp[],int l,int h)
{
    int inv_count=0;
    if(l<h)
    {
        int mid=(l+h)/2;
        inv_count+=mergesort(arr,temp,l,mid);
        inv_count+=mergesort(arr,temp,mid+1,h);
        inv_count+=merge(arr,temp,l,mid+1,h);
    }
    return inv_count;
}
int number_of_inversion(int arr[],int n)
{
    int low=0;
    int high=n-1,temp[n];
    return mergesort(arr,temp,low,high);
}

int main()
{
    int arr[4]={8,4,2,1};
    int size=4;
    cout<<number_of_inversion(arr,size);
    return 0;
}
method 3
using stl libarary

