method 1:
using bubble sort
#include<bits/stdc++.h>
using namespace std;

int smallest(int arr[],int n,int k)
{
    for(int i=0;i<k;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(arr[i]>arr[j])
            swap(arr[i],arr[j]);
        }
    }
    return arr[k-1];
}
int main()
{
    int arr[6] = {7, 10, 4, 3, 20, 15};
    int n=6;
    int k=3;
    cout<<" kth smallest element is "<<smallest(arr,n,k);
    return 0;
}
method 2
using max heap
#include<bits/stdc++.h>
using namespace std;

int smallest(int arr[],int n,int k)
{
    priority_queue<int>max_heap;
    for(int i=0;i<n;i++)
    {
        max_heap.push(arr[i]);
        if(max_heap.size()>k)
        max_heap.pop();
    }
    return max_heap.top();
}
int main()
{
    int arr[6] = {7, 10, 4, 3, 20, 15};
    int n=6;
    int k=3;
    cout<<" kth smallest element is "<<smallest(arr,n,k);
    return 0;
}

